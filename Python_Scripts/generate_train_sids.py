import os
from pathlib import Path

import numpy as np
from numpy import ndarray
from sklearn.model_selection import KFold

OUTDIR = Path(__file__).resolve().parent / "TRAIN_SIDS"
OUTDIR.mkdir(exist_ok=True)

K = 5
N_REP = 10
# see https://numpy.org/doc/stable/reference/random/bit_generators/generated/numpy.random.SeedSequence.html, and
# https://stackoverflow.com/a/68748710
ENTROPY = 280096009969736153623634659606057185157
SEEDS = np.random.SeedSequence(ENTROPY).generate_state(N_REP + 1).tolist()  # plus 1 for sids
SID_SEED = SEEDS.pop()
TRAIN_SIDS =np.array(["p084854", "p089698", "p074816", "p045127", "p045684", "p003866", "p041546", 
"p031171", "p074955", "p006158", "p062833", "p088685", "p083751", "p017582", "p005786", "p001791", 
"p078342", "p082432", "p017795", "p073833", "p057199", "p023318", "p011877", "p064771", "p029569", 
"p062681", "p093566", "p021321", "p022491", "p081763", "p003764", "p008532", "p002185", "p013715", 
"p063944", "p013183", "p056289", "p002317", "p012215", "p088994", "p000188", "p071722", "p007125", 
"p081893", "p059936", "p091561", "p004599", "p082973", "p078419", "p018988", "p054911", "p085892", 
"p021162", "p016455", "p026868", "p056229", "p003386", "p065342", "p021138", "p003521", "p057476", 
"p002639", "p082599", "p066322", "p094897", "p047613", "p002332", "p013373", "p098517", "p012294", 
"p086984", "p000652", "p007251", "p062782", "p031989", "p023591", "p003218", "p084461", "p032582", 
"p098169", "p019538", "p096922", "p085352", "p088146", "p094581", "p027638", "p058917", "p027423", 
"p004356", "p043673", "p072931", "p006464", "p023762", "p048327", "p053342", "p073979", "p008368", 
"p061213", "p023468", "p097441", "p026446", "p081633", "p058732", "p016139", "p023933", "p018264", 
"p004688", "p077383", "p000871", "p069857", "p075557", "p008947", "p014919", "p044979", "p064361", 
"p074188", "p079671", "p062926", "p029712", "p044827", "p032377", "p006381", "p043447", "p058662", 
"p019975", "p004685", "p023325", "p064927", "p022322", "p004656", "p000625", "p061519", "p013818", 
"p015877", "p062497", "p062835", "p085725", "p086359", "p049613", "p092331", "p088851", "p031942", 
"p078879", "p046156", "p056243", "p015687", "p004136", "p049311", "p052556", "p052532", "p015852", 
"p002224", "p021219", "p093336", "p078366", "p053865", "p082938", "p001892", "p057562", "p059864", 
"p084845", "p076418", "p009993", "p079664", "p004474", "p018126", "p047983", "p025862", "p078565", 
"p006892", "p064558", "p054197", "p007849", "p054922", "p015333", "p012351", "p028698", "p007695", 
"p095957", "p004833", "p011764", "p048872", "p083617", "p016286", "p005382", "p028611", "p031187", 
"p004286", "p077131", "p018971", "p096977", "p096879", "p065837", "p006917", "p068453", "p019618", 
"p018681", "p017828", "p048388", "p063934", "p077524", "p078292", "p055772", "p007519", "p000618", 
"p002488", "p041929", "p017929", "p061619", "p027162", "p007985", "p000377", "p003372", "p072196", 
"p068356", "p025658", "p055973", "p008569", "p022933", "p088552", "p009882", "p008915", "p031135", 
"p029961", "p001944", "p096643", "p054757", "p081758", "p044969", "p087948", "p087552", "p087692", 
"p022464", "p009889", "p044789", "p063456", "p012727", "p047733", "p071645", "p021139", "p012187", 
"p044781", "p052529", "p069522", "p099836", "p075142", "p027585", "p066786", "p073713", "p024477", 
"p057283", "p095343", "p004568", "p005163", "p045838", "p097599", "p022537", "p069483", "p087336", 
"p018676", "p016275", "p068127", "p019418", "p016684", "p091872", "p065611", "p044941", "p002397", 
"p009341", "p059381", "p087687", "p014936", "p005913", "p081193", "p032434", "p044521", "p000668", 
"p078473", "p041783", "p011244", "p099115", "p011342", "p015733", "p006889", "p092455", "p004331", 
"p026519", "p068915", "p011852", "p068564", "p062647", "p058286", "p064996", "p097529", "p007897", 
"p024799", "p043484", "p055725", "p021438", "p072627", "p026356", "p024244", "p011957", "p089772", 
"p012799", "p076327", "p015279", "p068956", "p007427", "p027551", "p016881", "p005171", "p001978", 
"p097158", "p049555", "p064925", "p067735", "p014873", "p017589", "p048149", "p006534", "p017152", 
"p012581", "p055921", "p029541", "p066483", "p087577", "p014328", "p049632", "p093784", "p093596", 
"p009258", "p078892", "p095118", "p062298", "p078155", "p024573", "p092651", "p024792", "p055337", 
"p076261", "p051871", "p012573", "p062323", "p086648", "p081491", "p004324", "p054385", "p082433", 
"p029137", "p018166", "p003474", "p004266", "p012174", "p015185", "p005933", "p026688", "p024922", 
"p061248", "p083182", "p073755", "p074618", "p032447", "p084749", "p026575", "p064136", "p013436", 
"p047335", "p031684", "p015557", "p026398", "p001224", "p027542", "p091669", "p058327", "p027172", 
"p007224", "p078416", "p001222", "p022393", "p076945", "p014561", "p049649", "p089697", "p074913", 
"p071514", "p007683", "p057935", "p005686", "p032763", "p054826", "p000439", "p005126", "p055657", 
"p074514", "p000773", "p004113", "p003619", "p008141", "p043571", "p041897", "p077951", "p081475", 
"p069343", "p009249", "p072426", "p022285", "p000787", "p095839", "p025225", "p002664", "p068663", 
"p007478", "p056287", "p079297", "p099383", "p076253", "p016511", "p007184", "p089544", "p003949", 
"p006116", "p041588", "p065268", "p054195", "p001855", "p052666", "p047858", "p043116", "p012586", 
"p014772", "p027193", "p024828", "p014266", "p053348", "p056963", "p014189", "p068391", "p001885", 
"p007655", "p001357", "p028166", "p015974", "p009971", "p062646", "p087134", "p022782", "p099776", 
"p055523", "p027232", "p048479", "p027833", "p003929", "p084842", "p092137", "p007183", "p052191", 
"p025228", "p076237", "p041359", "p063187", "p001586", "p098276"])

print(SEEDS)
print(TRAIN_SIDS)


def generate_train_sids() -> ndarray:
    for rep in range(N_REP):
        kf = KFold(K, shuffle=True, random_state=SEEDS[rep])
        for k, (train_idx, _) in enumerate(kf.split(TRAIN_SIDS)):
            sids = TRAIN_SIDS[train_idx]
            with open(OUTDIR / f"rep={rep}_k={k}.txt", "w") as handle:
                handle.write("\n".join(sids))
            # with a fixed index for easy job arrays
            N = rep * K + k
            with open(OUTDIR / f"N={N:02d}.txt", "w") as handle:
                handle.write("\n".join(sids))


def load_sids_rep_k(n_rep: int, k: int) -> ndarray:
    with open(OUTDIR / f"rep={n_rep}_k={k}.txt", "r") as handle:
        sids = handle.read().split("\n")
    return np.array(sorted(sids))


def load_sids_N(N: int) -> ndarray:
    with open(OUTDIR / f"N={N:02d}.txt", "r") as handle:
        sids = handle.read().split("\n")
    return np.array(sorted(sids))


if __name__ == "__main__":

    generate_train_sids()
    sids = load_sids_rep_k(n_rep=1, k=1)
    print(sids)
    os.environ["SLURM_ARRAY_TASK_ID"] = "5"
    N = int(os.environ.get("SLURM_ARRAY_TASK_ID"))
    sids = load_sids_N(N)
    print(sids)